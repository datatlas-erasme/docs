{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Datatlas Welcome to datatlas Documentation QuickStart Github Learn More Documentation in english Documentation in french","title":"Home"},{"location":"#datatlas","text":"Welcome to datatlas Documentation QuickStart Github","title":"Datatlas"},{"location":"#learn-more","text":"Documentation in english Documentation in french","title":"Learn More"},{"location":"EN/advanced/","text":"English Documentation QuickStart \ud83c\udf0d Datatlas presentation Datatlas aims to facilitate the display of various data sources on a map The tool is based on kepler.gl which facilitates the processing of data sources in geojson/json/csv and the display of large data sources in webgl \ud83d\udcc4 Datatlas Strucure graph TD Backend --> Frontend OpenData_API_Geojson --> Backend Notion_Table --> Backend Wordpress --> Backend Datatlas is a backend capable of retrieving the following data sources: Notion Database ( View table notion structure ) Wordpress API ( View table structure wordpress ) Geojson ( See table structure geojson ) These data are stored in a file named LayersConfiguration.json When the data sources are not formatted in geojson, the back applies a treatment of these data and formats it in a format specific to kepler.gl (the library used by the front to display the cartographic data) The front draws the data from the back and displays it with kepler.gl A new graphical layer specific to Datatlas is built on the basis of these data and allows to filter these same data on the map \ud83d\udd29 Back \ud83d\uddfa Front The front is based on react and using the Kepler.gl Library The components use the following structure [NEEDS TO BE UPDATED] graph TD A[index.tsx] --> B(App.js) B --> C{Front} C --> D[Map] --> D1(KeplerGl) --> D2(Kepler reducer) C --> E[Panel] E --> H(AddButton) E --> I(MobilePanelControl) E --> J(DesktopPanelControl) I --> I1([SearchBar]) I --> I2([ButtonSwitch]) I --> I3([Collapse]) --> I4([List]) I4 --> I41([Checkbox]) I4 --> I42([ButtonDay]) I4 --> I43([ButtonSelect]) I4 --> I45([ButtonIcon]) J --> J1([SearchBar]) J --> J2([ButtonDefault]) J --> J4([ButtonDay]) J --> J3([Collapse]) --> J5([List]) J5 --> J51([Checkbox]) J5 --> J52([ButtonDay]) J5 --> J53([ButtonSelect]) J5 --> J55([ButtonIcon]) Data sources structure The data sources do not have the same format, the back of datatlas comes to interface between the api of the source and the front in order to apply a treatment which is readable for the front Notion the back is able to draw a notion table thanks to the id of a notion table and to export it in a json readable by kepler.gl The back is able to process any notion table containing the following field types: date simple select multi-select short text long text email phone number nevertheless some type of fields are mandatory or have some function once loaded on the front latitude and longitude : their name must not change to allow the correct display of points on the map icon : allows the display of an icon instead of the point on the map, by default use the list of icons provided by kepler.gl see icons list , these icons can be customized see icon customization image : allows the display of an image in the Front Panel. This text field must be named image and must contain a url to an image (https://monserveur/monimage.jpg) Once your table is built and filled it is necessary to share it with your integration notion and to include your notion api key in the environment variables of the back when it is deployed See environment variables You will then have to add the table as a data layer in the back instance configuration file LayersConfiguration.json . Wordpress Concerning the wordpress layers, the back will pull the data from the wordpress api and then format it to kepler.gl \u26a0 At this time the wordpress module is not modular and only works on specific use cases Geojson Concerning the geojson format, the back does not apply any formatting of the data above, it only serves as a gateway between the data source and the front end, kepler.gl on the front end is able to process this data Any geojson data source should be supported Configuration instance Deployment Environment variables DATATLAS_BACK_END_PORT NOTION_API_KEY BEARER_TOKEN Front Front structure Sidepanel Filter Panel About Modal Personalized icons","title":"English Documentation"},{"location":"EN/advanced/#english-documentation","text":"QuickStart","title":"English Documentation"},{"location":"EN/advanced/#datatlas-presentation","text":"Datatlas aims to facilitate the display of various data sources on a map The tool is based on kepler.gl which facilitates the processing of data sources in geojson/json/csv and the display of large data sources in webgl","title":"\ud83c\udf0d Datatlas presentation"},{"location":"EN/advanced/#datatlas-strucure","text":"graph TD Backend --> Frontend OpenData_API_Geojson --> Backend Notion_Table --> Backend Wordpress --> Backend Datatlas is a backend capable of retrieving the following data sources: Notion Database ( View table notion structure ) Wordpress API ( View table structure wordpress ) Geojson ( See table structure geojson ) These data are stored in a file named LayersConfiguration.json When the data sources are not formatted in geojson, the back applies a treatment of these data and formats it in a format specific to kepler.gl (the library used by the front to display the cartographic data) The front draws the data from the back and displays it with kepler.gl A new graphical layer specific to Datatlas is built on the basis of these data and allows to filter these same data on the map","title":"\ud83d\udcc4 Datatlas Strucure"},{"location":"EN/advanced/#back","text":"","title":"\ud83d\udd29 Back"},{"location":"EN/advanced/#front","text":"The front is based on react and using the Kepler.gl Library The components use the following structure [NEEDS TO BE UPDATED] graph TD A[index.tsx] --> B(App.js) B --> C{Front} C --> D[Map] --> D1(KeplerGl) --> D2(Kepler reducer) C --> E[Panel] E --> H(AddButton) E --> I(MobilePanelControl) E --> J(DesktopPanelControl) I --> I1([SearchBar]) I --> I2([ButtonSwitch]) I --> I3([Collapse]) --> I4([List]) I4 --> I41([Checkbox]) I4 --> I42([ButtonDay]) I4 --> I43([ButtonSelect]) I4 --> I45([ButtonIcon]) J --> J1([SearchBar]) J --> J2([ButtonDefault]) J --> J4([ButtonDay]) J --> J3([Collapse]) --> J5([List]) J5 --> J51([Checkbox]) J5 --> J52([ButtonDay]) J5 --> J53([ButtonSelect]) J5 --> J55([ButtonIcon])","title":"\ud83d\uddfa Front"},{"location":"EN/advanced/#data-sources-structure","text":"The data sources do not have the same format, the back of datatlas comes to interface between the api of the source and the front in order to apply a treatment which is readable for the front","title":"Data sources structure"},{"location":"EN/advanced/#notion","text":"the back is able to draw a notion table thanks to the id of a notion table and to export it in a json readable by kepler.gl The back is able to process any notion table containing the following field types: date simple select multi-select short text long text email phone number nevertheless some type of fields are mandatory or have some function once loaded on the front latitude and longitude : their name must not change to allow the correct display of points on the map icon : allows the display of an icon instead of the point on the map, by default use the list of icons provided by kepler.gl see icons list , these icons can be customized see icon customization image : allows the display of an image in the Front Panel. This text field must be named image and must contain a url to an image (https://monserveur/monimage.jpg) Once your table is built and filled it is necessary to share it with your integration notion and to include your notion api key in the environment variables of the back when it is deployed See environment variables You will then have to add the table as a data layer in the back instance configuration file LayersConfiguration.json .","title":"Notion"},{"location":"EN/advanced/#wordpress","text":"Concerning the wordpress layers, the back will pull the data from the wordpress api and then format it to kepler.gl \u26a0 At this time the wordpress module is not modular and only works on specific use cases","title":"Wordpress"},{"location":"EN/advanced/#geojson","text":"Concerning the geojson format, the back does not apply any formatting of the data above, it only serves as a gateway between the data source and the front end, kepler.gl on the front end is able to process this data Any geojson data source should be supported","title":"Geojson"},{"location":"EN/advanced/#configuration-instance","text":"","title":"Configuration instance"},{"location":"EN/advanced/#deployment","text":"","title":"Deployment"},{"location":"EN/advanced/#environment-variables","text":"DATATLAS_BACK_END_PORT NOTION_API_KEY BEARER_TOKEN","title":"Environment variables"},{"location":"EN/advanced/#front_1","text":"","title":"Front"},{"location":"EN/advanced/#front-structure","text":"","title":"Front structure"},{"location":"EN/advanced/#sidepanel","text":"","title":"Sidepanel"},{"location":"EN/advanced/#filter-panel","text":"","title":"Filter Panel"},{"location":"EN/advanced/#about-modal","text":"","title":"About Modal"},{"location":"EN/advanced/#personalized-icons","text":"","title":"Personalized icons"},{"location":"EN/quickstart/","text":"Quickstart For the moment the installation can be a bit tedious, sorry for that Production \u26a0\ufe0f The project is still in beta use with caution In this example the project is built and deployed on a docker and/or on a local node environement Setup the back Clone the back git clone https://github.com/datatlas-erasme/back.git git checkout dev Setup your .env file DATATLAS_BACK_END_PORT=3000 NOTION_API_KEY=YOUR_NOTION_API_KEY BEARER_TOKEN=YOUR_BEARER_TOKEN Using Docker Compose docker-compose up Using npm npm install && npm run dev The back is now available on mydomain.com:3000 Setup the front Clone the front git clone https://github.com/datatlas-erasme/front.git git checkout dev Setup your .env file Should point on the back server REACT_APP_BACKEND_URL='http://`back.mydomain.com:3000` Using Docker Compose docker-compose up Using npm npm install && npm run dev The front is now available on front.mydomain.com:3000 Init instance conf By default","title":"Quickstart"},{"location":"EN/quickstart/#quickstart","text":"For the moment the installation can be a bit tedious, sorry for that","title":"Quickstart"},{"location":"EN/quickstart/#production","text":"\u26a0\ufe0f The project is still in beta use with caution In this example the project is built and deployed on a docker and/or on a local node environement","title":"Production"},{"location":"EN/quickstart/#setup-the-back","text":"Clone the back git clone https://github.com/datatlas-erasme/back.git git checkout dev Setup your .env file DATATLAS_BACK_END_PORT=3000 NOTION_API_KEY=YOUR_NOTION_API_KEY BEARER_TOKEN=YOUR_BEARER_TOKEN Using Docker Compose docker-compose up Using npm npm install && npm run dev The back is now available on mydomain.com:3000","title":"Setup the back"},{"location":"EN/quickstart/#setup-the-front","text":"Clone the front git clone https://github.com/datatlas-erasme/front.git git checkout dev Setup your .env file Should point on the back server REACT_APP_BACKEND_URL='http://`back.mydomain.com:3000` Using Docker Compose docker-compose up Using npm npm install && npm run dev The front is now available on front.mydomain.com:3000","title":"Setup the front"},{"location":"EN/quickstart/#init-instance-conf","text":"By default","title":"Init instance conf"},{"location":"FR/advanced.md/","text":"Documentation en fran\u00e7ais \ud83c\udf0d Presentation Datatlas Datatlas a pour vocation de faciliter l'affichage de diverses sources de donn\u00e9es sur une carte L'outil se base sur kepler.gl qui facilite le traitement de source de donnes en geojson/json/csv et l'affichage de larges sources de donn\u00e9es en webgl \ud83d\udcc4 Structuration de datatlas graph TD Backend --> Frontend OpenData_API_Geojson --> Backend Notion_Table --> Backend Wordpress --> Backend Datatlas est constitue d'un back en capacit\u00e9 de recup\u00e9rer les sources de donn\u00e9es suivantes : - Table Notion ( Voir structure table notion ) - API Wordpress ( Voir structure table wordpress ) - Geojson ( Voir structure table geojson ) Ces donn\u00e9es sont stock\u00e9es dans un fichier nomm\u00e9 LayersConfiguration.json Lorsque les sources de donnees ne sont pas format\u00e9es en geojson, le back applique un traitement de ces donn\u00e9es et le formate en un format propre \u00e0 kepler.gl (la librairie utilis\u00e9e par le front pour afficher les donn\u00e9es cartographiques) Le Front vient lui tirer les donn\u00e9es du back et les affiche avec kepler.gl Un nouveau layer graphique propre \u00e0 Datatlas est construit sur la base de ces donn\u00e9es et permet de filtrer ces memes donnees sur la carte \ud83d\udd29 Back \ud83d\uddfa Front graph TD A[index.tsx] --> B(App.js) B --> C{Front} C --> D[Map] --> D1(KeplerGl) --> D2(Kepler reducer) C --> E[Panel] E --> H(AddButton) E --> I(MobilePanelControl) E --> J(DesktopPanelControl) I --> I1([SearchBar]) I --> I2([ButtonSwitch]) I --> I3([Collapse]) --> I4([List]) I4 --> I41([Checkbox]) I4 --> I42([ButtonDay]) I4 --> I43([ButtonSelect]) I4 --> I45([ButtonIcon]) J --> J1([SearchBar]) J --> J2([ButtonDefault]) J --> J4([ButtonDay]) J --> J3([Collapse]) --> J5([List]) J5 --> J51([Checkbox]) J5 --> J52([ButtonDay]) J5 --> J53([ButtonSelect]) J5 --> J55([ButtonIcon]) Structuration des sources de donnees Les sources de donn\u00e9es n'ayant pas les memes format, la back de datatlas vient s'interfacer entre l'api de la source et le front afin d'y appliquer un traitement qui soit lisible pour le front Notion le back est capable grace \u00e0 l'id d'une table notion de tirer une table notion et de l'exporter en un json lisible par kepler.gl Le back est capable de traiter n'importe quelle table notion contenant les types de champs suivants : - date - simple select - multi-select - texte court - texte long - email - telephone - nombre n\u00e9anmoins certains type de champs sont obligatoires ou poss\u00e8dent certaines fonction une fois charg\u00e9s sur le front - latitude et longitude : leurs nom ne doit pas changer permettent le bon affichage des points sur la carte - icon : permet l'affichage d'une icone \u00e0 la place du point sur la carte, par defaut utilise la liste d'icone fournie par kepler.gl voir liste icones , ces icones peuvent \u00eatres personnalis\u00e9es voir personalisation icone - image : permet l'affichage d'une image dans le sidepanel du Front. Ce champ de type texte doit \u00eatre nomm\u00e9 image et doit contenir une url vers une images (https://monserveur/monimage.jpg) Une fois votre tableau construit et remplis il est n\u00e9cessaire de le partager \u00e0 votre integration notion et d'inclure votre clef api notion dans les variables d'environement du back \u00e0 son deploiement Voir variables d'environement Il faudra ensuite l'ajouter la table comme un layer de donn\u00e9es dans le fichier de configuration d'instance du back LayersConfiguration.json Wordpress Concernant les layers wordpress, le back va tirer les donn\u00e9es de l'api wordpress et les formater ensuite au format kepler.gl \u26a0 A ce jour le module wordpress n'est pas modulaire et ne fonctionne que sur des cas d'usages precis Geojson Concernant le format geojson, le back n'applique aucun formatage de donn\u00e9es desssus, il ne sert que de passerelle entre la source de la donn\u00e9e et le front, kepler.gl sur le front est en capacit\u00e9 de traiter ces donn\u00e9es N'importe quelle source de donn\u00e9es en geojson devrait etre support\u00e9e Configuration instance Deployement Variables d'environement DATATLAS_BACK_END_PORT NOTION_API_KEY BEARER_TOKEN Front Structure du front Sidepanel Filter Panel About Modal icone personalisees","title":"Documentation en fran\u00e7ais"},{"location":"FR/advanced.md/#documentation-en-francais","text":"","title":"Documentation en fran\u00e7ais"},{"location":"FR/advanced.md/#presentation-datatlas","text":"Datatlas a pour vocation de faciliter l'affichage de diverses sources de donn\u00e9es sur une carte L'outil se base sur kepler.gl qui facilite le traitement de source de donnes en geojson/json/csv et l'affichage de larges sources de donn\u00e9es en webgl","title":"\ud83c\udf0d Presentation Datatlas"},{"location":"FR/advanced.md/#structuration-de-datatlas","text":"graph TD Backend --> Frontend OpenData_API_Geojson --> Backend Notion_Table --> Backend Wordpress --> Backend Datatlas est constitue d'un back en capacit\u00e9 de recup\u00e9rer les sources de donn\u00e9es suivantes : - Table Notion ( Voir structure table notion ) - API Wordpress ( Voir structure table wordpress ) - Geojson ( Voir structure table geojson ) Ces donn\u00e9es sont stock\u00e9es dans un fichier nomm\u00e9 LayersConfiguration.json Lorsque les sources de donnees ne sont pas format\u00e9es en geojson, le back applique un traitement de ces donn\u00e9es et le formate en un format propre \u00e0 kepler.gl (la librairie utilis\u00e9e par le front pour afficher les donn\u00e9es cartographiques) Le Front vient lui tirer les donn\u00e9es du back et les affiche avec kepler.gl Un nouveau layer graphique propre \u00e0 Datatlas est construit sur la base de ces donn\u00e9es et permet de filtrer ces memes donnees sur la carte","title":"\ud83d\udcc4 Structuration de datatlas"},{"location":"FR/advanced.md/#back","text":"","title":"\ud83d\udd29 Back"},{"location":"FR/advanced.md/#front","text":"graph TD A[index.tsx] --> B(App.js) B --> C{Front} C --> D[Map] --> D1(KeplerGl) --> D2(Kepler reducer) C --> E[Panel] E --> H(AddButton) E --> I(MobilePanelControl) E --> J(DesktopPanelControl) I --> I1([SearchBar]) I --> I2([ButtonSwitch]) I --> I3([Collapse]) --> I4([List]) I4 --> I41([Checkbox]) I4 --> I42([ButtonDay]) I4 --> I43([ButtonSelect]) I4 --> I45([ButtonIcon]) J --> J1([SearchBar]) J --> J2([ButtonDefault]) J --> J4([ButtonDay]) J --> J3([Collapse]) --> J5([List]) J5 --> J51([Checkbox]) J5 --> J52([ButtonDay]) J5 --> J53([ButtonSelect]) J5 --> J55([ButtonIcon])","title":"\ud83d\uddfa Front"},{"location":"FR/advanced.md/#structuration-des-sources-de-donnees","text":"Les sources de donn\u00e9es n'ayant pas les memes format, la back de datatlas vient s'interfacer entre l'api de la source et le front afin d'y appliquer un traitement qui soit lisible pour le front","title":"Structuration des sources de donnees"},{"location":"FR/advanced.md/#notion","text":"le back est capable grace \u00e0 l'id d'une table notion de tirer une table notion et de l'exporter en un json lisible par kepler.gl Le back est capable de traiter n'importe quelle table notion contenant les types de champs suivants : - date - simple select - multi-select - texte court - texte long - email - telephone - nombre n\u00e9anmoins certains type de champs sont obligatoires ou poss\u00e8dent certaines fonction une fois charg\u00e9s sur le front - latitude et longitude : leurs nom ne doit pas changer permettent le bon affichage des points sur la carte - icon : permet l'affichage d'une icone \u00e0 la place du point sur la carte, par defaut utilise la liste d'icone fournie par kepler.gl voir liste icones , ces icones peuvent \u00eatres personnalis\u00e9es voir personalisation icone - image : permet l'affichage d'une image dans le sidepanel du Front. Ce champ de type texte doit \u00eatre nomm\u00e9 image et doit contenir une url vers une images (https://monserveur/monimage.jpg) Une fois votre tableau construit et remplis il est n\u00e9cessaire de le partager \u00e0 votre integration notion et d'inclure votre clef api notion dans les variables d'environement du back \u00e0 son deploiement Voir variables d'environement Il faudra ensuite l'ajouter la table comme un layer de donn\u00e9es dans le fichier de configuration d'instance du back LayersConfiguration.json","title":"Notion"},{"location":"FR/advanced.md/#wordpress","text":"Concernant les layers wordpress, le back va tirer les donn\u00e9es de l'api wordpress et les formater ensuite au format kepler.gl \u26a0 A ce jour le module wordpress n'est pas modulaire et ne fonctionne que sur des cas d'usages precis","title":"Wordpress"},{"location":"FR/advanced.md/#geojson","text":"Concernant le format geojson, le back n'applique aucun formatage de donn\u00e9es desssus, il ne sert que de passerelle entre la source de la donn\u00e9e et le front, kepler.gl sur le front est en capacit\u00e9 de traiter ces donn\u00e9es N'importe quelle source de donn\u00e9es en geojson devrait etre support\u00e9e","title":"Geojson"},{"location":"FR/advanced.md/#configuration-instance","text":"","title":"Configuration instance"},{"location":"FR/advanced.md/#deployement","text":"","title":"Deployement"},{"location":"FR/advanced.md/#variables-denvironement","text":"","title":"Variables d'environement"},{"location":"FR/advanced.md/#datatlas_back_end_port","text":"","title":"DATATLAS_BACK_END_PORT"},{"location":"FR/advanced.md/#notion_api_key","text":"","title":"NOTION_API_KEY"},{"location":"FR/advanced.md/#bearer_token","text":"","title":"BEARER_TOKEN"},{"location":"FR/advanced.md/#front_1","text":"","title":"Front"},{"location":"FR/advanced.md/#structure-du-front","text":"","title":"Structure du front"},{"location":"FR/advanced.md/#sidepanel","text":"","title":"Sidepanel"},{"location":"FR/advanced.md/#filter-panel","text":"","title":"Filter Panel"},{"location":"FR/advanced.md/#about-modal","text":"","title":"About Modal"},{"location":"FR/advanced.md/#icone-personalisees","text":"","title":"icone personalisees"}]}